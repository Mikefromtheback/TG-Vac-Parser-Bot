import logging
import aiogram
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
import config
from bd import db
from aiogram import executor, Bot, types, Dispatcher
from keyboards import *
from datetime import datetime

logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.token)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)


class RegistrationProcess(StatesGroup):  # FSM
    city = State()
    remote = State()
    grade = State()
    skills = State()
    salary = State()


@dp.message_handler(commands="menu")
async def start(message: types.Message):
    if db.check_user(message.from_user.id):
        await message.answer(text=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
                             reply_markup=menu_board)
    else:
        await message.answer(
            text="–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Å—Ñ–µ—Ä–µ IT. –û—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è —Ç–µ–±—è –≤–∞–∫–∞–Ω—Å–∏–∏.",
            reply_markup=register_board)


@dp.callback_query_handler(lambda c: c.data == "check")
async def check_vacancies(c: types.CallbackQuery):
    user_data = db.get_user_data(c.from_user.id)
    latest_time = user_data[6]
    parsed_vacancies = db.get_vacancies(db.get_user_data(c.from_user.id))
    if not parsed_vacancies:
        await c.answer()
        await bot.send_message(c.from_user.id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç.",
                               reply_markup=delete_board)
    else:
        await c.answer()
        for vacancy in parsed_vacancies:
            temp_link_board = InlineKeyboardMarkup()
            link_button = InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ", url=vacancy[3])
            temp_link_board.add(link_button)
            temp_link_board.add(delete_button)
            await bot.send_message(c.from_user.id,
                                   text=f"–ù–∞–π–¥–µ–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è!\n\n–ö–æ–º–ø–∞–Ω–∏—è:{vacancy[1]}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {vacancy[2]}",
                                   reply_markup=temp_link_board)
            latest_time = max(latest_time, vacancy[4])
        db.update_user_time(c.from_user.id, latest_time)


@dp.callback_query_handler(lambda c: c.data == "delete")
async def delete_message(c):
    await c.message.delete()


@dp.callback_query_handler(lambda c: c.data == "forget")
async def forget(c: types.CallbackQuery):
    db.delete_user(c.from_user.id)
    await c.answer()
    await bot.send_message(c.from_user.id, "–ê–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞. –¢—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é.", reply_markup=register_board)


@dp.callback_query_handler(lambda c: c.data == "register")
async def start_registration(c: types.CallbackQuery):
    await RegistrationProcess.city.set()
    await c.answer()
    await bot.send_message(c.from_user.id,
                           "–í–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã? –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —É–¥–∞–ª—ë–Ω–Ω–æ, –Ω–∞–∂–º–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.",
                           reply_markup=remote_board)


@dp.message_handler(lambda message: len(message.text) > 20, state=RegistrationProcess.city)
async def process_bad_city(message: types.Message):
    return await message.reply("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –µ—â—ë —Ä–∞–∑ ‚òπÔ∏è",
                               reply_markup=remote_board)


@dp.message_handler(lambda message: message.text == "–•–æ—á—É —Ç–æ–ª—å–∫–æ —É–¥–∞–ª—ë–Ω–Ω–æ", state=RegistrationProcess.city)
async def get_city(message: types.Message, state: FSMContext):
    await RegistrationProcess.grade.set()
    await state.update_data(city="NULL")
    await state.update_data(remote=True)
    await message.reply("–Ø –∑–∞–ø–æ–º–Ω–∏–ª. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, –Ω–∞ –∫–∞–∫–æ–π —Ç—ã –ø—Ä–µ—Ç–µ–Ω–¥—É–µ—à—å –≥—Ä–µ–π–¥.",
                        reply_markup=grade_board)


@dp.message_handler(state=RegistrationProcess.city)
async def get_city(message: types.Message, state: FSMContext):
    await RegistrationProcess.next()
    await state.update_data(city=message.text)
    return await message.reply(
        "–Ø –∑–∞–ø–æ–º–Ω–∏–ª. –í—ã–±–µ—Ä–∏, —Ö–æ—á–µ—à—å –ª–∏ —Ç—ã –≤–∏–¥–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ —Å —É–¥–∞–ª—ë–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π, –∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É.",
        reply_markup=yesno_board)


@dp.message_handler(state=RegistrationProcess.remote)
async def process_remote(message: types.Message, state: FSMContext):
    if (message.text != "–î–∞" and message.text != "–ù–µ—Ç"):
        return await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
    if (message.text == "–î–∞"):
        await state.update_data(remote=True)
    else:
        await state.update_data(remote=False)
    await RegistrationProcess.grade.set()
    await message.reply("–•–æ—Ä–æ—à–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, –Ω–∞ –∫–∞–∫–æ–π —Ç—ã –ø—Ä–µ—Ç–µ–Ω–¥—É–µ—à—å –≥—Ä–µ–π–¥.",
                        reply_markup=grade_board)


@dp.message_handler(lambda message: message.text not in ["Junior", "Middle", "Senior", "Lead"],
                    state=RegistrationProcess.grade)
async def process_bad_grade(message: types.Message):
    return await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≥—Ä–µ–π–¥ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ ‚òπÔ∏è")


@dp.message_handler(state=RegistrationProcess.grade)  # skill board
async def process_grade(message: types.Message, state: FSMContext):
    await RegistrationProcess.skills.set()
    await state.update_data(grade=message.text)
    await message.reply("–ì—Ä–µ–π–¥ –≤—ã–±—Ä–∞–Ω. –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–±—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –Ω–∞–∂–º–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                        reply_markup=aiogram.types.ReplyKeyboardRemove())
    async with state.proxy() as data:
        data['chosen_skills'] = set()
    await bot.send_message(message.from_user.id, text="–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ —Ö–æ—á–µ—à—å.",
                           reply_markup=skills_board)


@dp.callback_query_handler(lambda c: c.data == "askforsalary", state=RegistrationProcess.skills)
async def process_skills(c: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if not data['chosen_skills']:
            return await c.answer(text="–¢—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª!")
        await state.update_data(skills=list(data['chosen_skills']))
    await RegistrationProcess.salary.set()
    await c.answer()
    await bot.send_message(c.from_user.id,
                           text="–•–æ—Ä–æ—à–æ! –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥: –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, —É–∫–∞–∂–∏ —á–∏—Å–ª–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–ø –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö, –∏ —è –Ω–µ –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –∑–ø –º–µ–Ω—å—à–µ –Ω–µ—ë –∏ –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã. –ï—Å–ª–∏ —Ç—ã –Ω–∞–ø–∏—à–µ—à—å 0, —Ç–æ —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏, –¥–∞–∂–µ –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–ø.")


@dp.callback_query_handler(state=RegistrationProcess.skills)
async def collecting_skills(c: types.CallbackQuery, state: FSMContext):
    refreshed_skills_board = InlineKeyboardMarkup(resize_keyboard=True, row_width=3)
    async with state.proxy() as data:
        if c.data in data['chosen_skills']:
            data['chosen_skills'].remove(c.data)
        else:
            data['chosen_skills'].add(c.data)
        for skill in skills_available:
            if skill.callback_data in data['chosen_skills']:
                refreshed_skills_board.add(
                    InlineKeyboardButton(text=skill.text + " üü¢", callback_data=skill.callback_data))
            else:
                refreshed_skills_board.add(skill)
    refreshed_skills_board.add(continue_button)
    await bot.edit_message_reply_markup(chat_id=c.from_user.id, message_id=c.message.message_id,
                                        reply_markup=refreshed_skills_board)


@dp.message_handler(lambda message: len(message.text) > 10 or not message.text.isdigit(),
                    state=RegistrationProcess.salary)
async def process_bad_salary(message: types.Message):
    return await message.reply("–ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ –µ—â–µ —Ä–∞–∑ ‚òπÔ∏è")


@dp.message_handler(state=RegistrationProcess.salary)
async def process_salary(message: types.Message, state: FSMContext):
    await state.update_data(salary=int(message.text))
    async with state.proxy() as data:
        db.add_user(message.from_user.id, data['city'], data['remote'],
                    data['grade'], data['skills'], data['salary'])
    await bot.send_message(message.chat.id, text="–í—Å–µ –≥–æ—Ç–æ–≤–æ, —Ç–µ–ø–µ—Ä—å —è –±—É–¥—É –∏—Å–∫–∞—Ç—å –¥–ª—è —Ç–µ–±—è –≤–∞–∫–∞–Ω—Å–∏–∏!",
                           reply_markup=InlineKeyboardMarkup().add(check_button))
    await state.finish()


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
